testing = assert(SMODS.load_file("libs\\steamodded_test\\main.lua"))()

TestBundle = testing.TestBundle
Test = testing.Test

G.steamodded_tests.tests[] = TestBundle "test_tests"
        * TestBundle "assertions"
            * Test("assert_eq", -> testing.assert_eq(5, 5))
            * Test("assert_ne", -> testing.assert_ne(5, 4))
            * Test("assert_lt", -> testing.assert_lt(4, 5))
            * Test("assert_gt", -> testing.assert_gt(5, 4))
            * Test("assert_le", -> testing.assert_le(4, 5))
            * Test("assert_ge", -> testing.assert_ge(5, 4))
            * Test("assert_le", -> testing.assert_le(5, 5))
            * Test("assert_ge", -> testing.assert_ge(5, 5))

        * TestBundle "add_centers"
            
            * Test "1", 
                * testing.create_state_steps()
                * -> testing.add_centers({"j_joker"})
                * -> testing.assert_eq(G.jokers.cards[1].config.center.key, "j_joker")
            
            * Test "2"
                * testing.create_state_steps()
                * -> testing.add_centers({"j_joker", "j_joker"})
                * -> testing.assert_eq(G.jokers.cards[1].config.center.key, "j_joker")
                * -> testing.assert_eq(G.jokers.cards[2].config.center.key, "j_joker")
            
            * Test "6_sequential"
                * testing.create_state_steps()
                * -> testing.add_centers(["j_joker" for _=1,6])
                * -> testing.assert_eq(#[joker for joker in *G.jokers.cards when joker.config.center.key == "j_joker"], 6)
                * -> testing.assert_eq(#SMODS.find_card("j_joker"), 6)
        
        * TestBundle "new_run"
            -- Unfortunately, G.GAME.selected_back is both how we set the back, and the best way to check it. so uh. if that was the wrong variable they'd all pass anyway
            * Test "default"
                * -> testing.new_run()
                * -> testing.assert_eq(G.GAME.selected_back.name, "Red Deck")
            * Test "by_name"
                * -> testing.new_run({back: "Blue Deck"})
                * -> testing.assert_eq(G.GAME.selected_back.name, "Blue Deck")
            * Test "by_id"
                * -> testing.new_run({back: "b_green"})
                * -> testing.assert_eq(G.GAME.selected_back.name, "Green Deck")
            * Test "by_object"
                * -> testing.new_run({back: G.P_CENTERS.b_yellow})
                * -> testing.assert_eq(G.GAME.selected_back.name, "Yellow Deck")