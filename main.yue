
logger = { -- Placeholder logger, for when DebugPlus isn't available
    log:   print
    debug: print
    info:  print
    warn:  print
    error: print
}

-- Internal stuff

concat_lists = (list_of_lists) ->
    output = {}
    for _, list in ipairs(list_of_lists)
        for _, item in ipairs(list)
            output[] = item
    return output

put_in_array_if_alone = (this_guy) ->
    output = nil
    if type(this_guy) == "function" or type(this_guy) == "string"
        output = {this_guy}
    else
        output = this_guy
    output


run_ordered_events = (funcs, previous_result=nil, retry_count=0) ->
    if #funcs == 0
        return
    first_func = funcs[1]
    remaining_funcs = [func for func in *funcs[2,]]
    
    -- Unpack, if necessary
    if type(first_func) == "table"
        -- print("Unpacking #{first_func}")
        funcs = concat_lists({
            first_func,
            remaining_funcs
        })
        first_func = funcs[1]
        remaining_funcs = [func for func in *funcs[2,]]

    G.E_MANAGER\add_event(Event({
        no_delete: true
        func: ->
            -- If we're not ready yet, delay
            retry_danger_threshold = 100
            event_count = #G.E_MANAGER.queues.base
            event_tolerance = (retry_count-1) / retry_danger_threshold + 2 -- This one will always be in there, it's not removed until a success. and there seems to be some other permanent one?
            if event_count > event_tolerance 
                if retry_count > 0 and retry_count % retry_danger_threshold == 0
                    logger.warn("Hit #{retry_count} retries, there's probably something stuck in the queue? (The queue has #{#G.E_MANAGER.queues.base} entries) (raising the remaining event tolerance to #{math.ceil(event_tolerance)})")
                run_ordered_events(funcs, previous_result, retry_count+1)
            -- Actually do it :)
            else
                -- logger.debug("Running event #{_}, #{func} (#{previous_result})")
                result = nil
                success, result = pcall(-> first_func(previous_result))
                if not success
                    logger.error(result)
                    result = "FUCK!!!"
                -- logger.debug("\tResult was #{result}")
                run_ordered_events(remaining_funcs, result)
            true  -- So that the event succeeds
    }))

n_tabs = (indentation) ->
    string.rep("\t", indentation)

-- Meat and potatoes

export class Test
    new: (name, funcs, prep=->) =>
        @name = name
        @funcs = funcs  -- Can be a single function or an array of them
    
    gather_events: (indentation=0) =>
        output = put_in_array_if_alone(@funcs)
        output[] = (result) -> 
                if result == "FUCK!!!"
                    logger.warn(n_tabs(indentation) .. "\tTest \"#{@name}\" errored! See above...")
                    result = false
                elseif result == false
                    logger.warn(n_tabs(indentation) .. "\tTest \"#{@name}\" failed! :(")
                elseif result == true
                    logger.info(n_tabs(indentation) .. "\tTest \"#{@name}\" passed! :)")
                else
                    logger.warn(n_tabs(indentation) .. "\tTest \"#{@name}\" returned neither true nor false, but instead #{result}? :S")
                result
        return output


export class TestBundle
    new: (name, tests) =>
        @name = name
        @tests = tests
    
    run: =>
        run_ordered_events(self\gather_events())

    gather_events: (indentation=0) =>
        output = {}
        tally = {passed: 0, failed: 0}
        output[] = ->
            logger.info(n_tabs(indentation) .. "Running test bundle \"#{@name}\" (contains #{#@tests} subtest(s))...")

        for _, test in ipairs(@tests)
            -- print("Gathering events for #{test.name}")
            events = test\gather_events(indentation+1)
            output[] = -> G.E_MANAGER\clear_queue()
            for _, event in ipairs(events)
                output[] = event
            output[] = (result) -> tally[result and "passed" or "failed"] += 1

        output[] = ->
            all_passed = tally.failed == 0
            via = all_passed and logger.info or logger.error
            via(n_tabs(indentation) .. "...done with \"#{@name}\". Ran #{#@tests} test(s). #{tally.passed} passed, #{tally.failed} failed.")
            return all_passed
        
        output


export run_all_tests =  ->
    -- run_ordered_events(G.steamodded_tests.tests[1]\gather_events!)
    -- print()
    -- print()
    -- print()
    G.E_MANAGER\clear_queue()
    G.steamodded_tests\run!
        
init = () ->
    G.steamodded_tests = TestBundle("All tests", {}) if G.steamodded_tests == nil
init()

--- Helpful lil guys :)

export playing_card_from_string = (input) ->
    -- SMODS.create_card seems to be for everyihing but playing cards? Standard and Playing are both not the right set
    suit = "S"
    rank = "T"
    input = string.lower(input)

    if_contains_then = (searching_for, func) ->
        input, count = string.gsub(input, searching_for, "")
        if count > 0
            func()

    -- Suits

    if_contains_then("spades",      -> suit="S")
    if_contains_then("s",           -> suit="S")
    if_contains_then("♠",           -> suit="S")
    if_contains_then("♤",           -> suit="S")

    if_contains_then("hearts",       -> suit="H")
    if_contains_then("h",            -> suit="H")
    if_contains_then("♥",            -> suit="H")
    if_contains_then("♡",            -> suit="H")

    if_contains_then("clubs",       -> suit="C")
    if_contains_then("c",           -> suit="C")
    if_contains_then("♣",           -> suit="C")
    if_contains_then("♧",           -> suit="C")

    if_contains_then("diamonds",    -> suit="D")
    if_contains_then("d",           -> suit="D")
    if_contains_then("♦",           -> suit="D")
    if_contains_then("♢",           -> suit="D")

    -- Ranks

    if_contains_then("ace",         -> rank="A")
    if_contains_then("a",           -> rank="A")

    if_contains_then("king",        -> rank="K")
    if_contains_then("k",           -> rank="K")

    if_contains_then("queen",       -> rank="Q")
    if_contains_then("q",           -> rank="Q")

    if_contains_then("jack",        -> rank="J")
    if_contains_then("j",           -> rank="J")

    if_contains_then("ten",         -> rank="T")
    if_contains_then("10",          -> rank="T")
    if_contains_then("t",           -> rank="T")

    -- eval input="6";string.sub(input, string.find(input, "%d"))
    -- eval string.find("6", "6")
    -- eval string.sub(input, string.find("6", "6")

    a, b = string.find(input, "%d")
    if a != nil
        rank = string.sub(input, a, b)

    card = Card(G.play.T.x + G.play.T.w/2, G.play.T.y, G.CARD_W, G.CARD_H, front, G.P_CENTERS.c_base, {playing_card: G.playing_card})
    card\set_base(G.P_CARDS["#{suit}_#{rank}"])
    card

    -- Card(G.play.T.x + G.play.T.w/2, G.play.T.y, G.CARD_W, G.CARD_H, front, G.P_CENTERS.m_stone, {playing_card = G.playing_card})
    -- SMODS.create_card({
    --     set: "Standard",
    --     no_edition: true,
    --     soulable: false
    -- })


-- For actually making useful tests

export waiting_steps = (how_many=1) ->
    output = []
    for _ = 1, how_many
        output[] = -> nil
    output


export create_state_steps = (kwargs={}) ->
    kwargs.stake = kwargs.stake or 1
    kwargs.seed  = kwargs.seed  or "TUTORIAL"

    {
        -> G.FUNCS.start_run(nil, {
            stake: kwargs.stake,
            seed:  kwargs.seed,
        }),
        -- -> G.hand.config.card_limit = 1,
        -> new_round(),
        -- ->
            -- G.deck.config.card_limit = 0
            -- G.hand.cards = {}
    }

export empty_hand = ->
    G.hand.cards = {}

export empty_centers = ->
    G.jokers.cards = {}
    G.consumeables.cards = {}

export add_cards_to_hand = (playing_cards, select_them=false) ->
    for _, card in ipairs(playing_cards)
        if type(card) == "string"
            card = playing_card_from_string(card)
        card\add_to_deck()
        G.deck.config.card_limit += 1
        table.insert(G.playing_cards, card)
        G.hand\emplace(card)
        if select_them
            card\click!

export add_centers = (center_keys) ->
    center_keys = put_in_array_if_alone(center_keys)
    for _, center_key in ipairs(center_keys)
        SMODS.add_card({key: center_key, soulable: false, no_edition: true})

export play_hand = (playing_cards, kwargs={})->
    kwargs.hold =    kwargs.hold or {}
    kwargs.centers = kwargs.centers or {}

    empty_hand()
    empty_centers()
    add_cards_to_hand(playing_cards, true)
    add_cards_to_hand(kwargs.hold)
    add_centers(kwargs.centers)
    
    G.FUNCS.play_cards_from_highlighted()

export assert_hand_scored = (expected_chips) ->
    chips = G.GAME.chips
    assert(chips == expected_chips, "Expected #{expected_chips} chips, was #{chips}")

-- DebugPlus stuff

success, dpAPI = pcall(require, "debugplus-api")
if success and dpAPI.isVersionCompatible(1)
    local debugplus = dpAPI.registerID("steamodded_test")
    logger = debugplus.logger

    debugplus.addCommand({
        name: "test",
        shortDesc: "Runs all tests.",
        desc: "IDK man!!! It runs your tests and tells you the results!!",
        exec: (args, rawArgs, dp) ->
            run_all_tests()
            "here we go :)"
})