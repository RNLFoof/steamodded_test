
json = require "json"
assert(json)

logger = { -- Placeholder logger, for when DebugPlus isn't available
    log:   print
    debug: print
    info:  print
    warn:  print
    error: print
}

-- Internal stuff

_concat_lists = (list_of_lists) ->
    output = {}
    for _, list in ipairs(list_of_lists)
        for _, item in ipairs(list)
            output[] = item
    return output

_put_in_array_if_alone = (this_guy) ->
    output = nil
    if type(this_guy) == "function" or type(this_guy) == "string"
        output = {this_guy}
    else
        output = this_guy
    output


_run_ordered_events = (funcs, previous_result=nil, retry_count=0) ->
    if #funcs == 0
        return
    first_func = funcs[1]
    remaining_funcs = [func for func in *funcs[2,]]
    
    -- Unpack, if necessary
    if type(first_func) == "table"
        -- print("Unpacking #{first_func}")
        funcs = _concat_lists({
            first_func,
            remaining_funcs
        })
        first_func = funcs[1]
        remaining_funcs = [func for func in *funcs[2,]]

    G.E_MANAGER\add_event(Event({
        no_delete: true
        func: ->
            -- If we're not ready yet, delay
            retry_danger_threshold = 100
            event_count = #G.E_MANAGER.queues.base
            event_tolerance = (retry_count-1) / retry_danger_threshold + 2 -- This one will always be in there, it's not removed until a success. and there seems to be some other permanent one?
            if event_count > event_tolerance 
                if retry_count > 0 and retry_count % retry_danger_threshold == 0
                    logger.warn("Hit #{retry_count} retries, there's probably something stuck in the queue? (The queue has #{#G.E_MANAGER.queues.base} entries) (raising the remaining event tolerance to #{math.ceil(event_tolerance)})")
                _run_ordered_events(funcs, previous_result, retry_count+1)
            -- Actually do it :)
            else
                -- logger.debug("Running event #{_}, #{func} (#{previous_result})")
                result = nil
                success, result = pcall(-> first_func(previous_result))
                if not success
                    logger.error(result)
                    result = "FUCK!!!"
                -- logger.debug("\tResult was #{result}")
                _run_ordered_events(remaining_funcs, result)
            true  -- So that the event succeeds
    }))

_n_tabs = (indentation) ->
    string.rep("\t", indentation)

-- Meat and potatoes

PREVIOUS_RESULTS_PATH = "steamodded_test_previous_results.json"

context_defaults = {
    indentation: 0
    path: {}
    previous_results: {}
    test_index: 1
    test_count: 1
}
if love.filesystem.getInfo(PREVIOUS_RESULTS_PATH) != nil
    contents = love.filesystem.read(PREVIOUS_RESULTS_PATH)
    if contents != ""
        context_defaults.previous_results = json.decode(contents)

export class TestBase
    path_string: (path) -> table.concat(path, "/")
    path_string_tag_yourself: (path) => @.path_string({...path, @name})

    gather_events_config_with_defaults: (config) ->
        defaults = {
            whitelist: ".*",
            failed_only: false
        }
        return {...defaults, ...config}
    
    should_skip: (config, context) => false
    
    gather_events_context_with_defaults: (context) =>
        defaults = context_defaults
        output = {...defaults, ...context}

        return output
    
    extrapolate_subcontext: (context) =>
        subcontext = {...context} -- This isn't a deep copy so be careful :)
        subcontext.indentation += 1
        subcontext.path = {...subcontext.path, @name}  -- Doesn't just append to copy the array
        return subcontext
    
    line_text: (context, start_text="", end_text="") =>
        _n_tabs(context.indentation + 1) ..
        "[#{context.test_index}/#{context.test_count}] " ..
        start_text ..
        (start_text != "" and " " or "")..
        @@__name ..
        " \"#{@.path_string(context.path)}\" " ..
        end_text
    
export class Test extends TestBase
    new: (name, funcs, prep=->) =>
        @name = name
        @funcs = funcs  -- Can be a single function or an array of them

    should_skip: (config, context) => 
        if config.failed_only and context.previous_results[@.path_string(context.path)]
            return "Succeeded last time"
        super(config, context)
    
    gather_events: (config={}, _context={}) =>
        config = @.gather_events_config_with_defaults(config)
        context = @gather_events_context_with_defaults(_context)
        context = @extrapolate_subcontext(context)

        output = _put_in_array_if_alone(@funcs)
        
        output[] = (result) -> 
            if result == "FUCK!!!"
                logger.warn(@line_text(context, nil, "errored! See above..."))
                result = false
            elseif result == false
                logger.warn(@line_text(context, nil, "failed! :("))
            elseif result == true
                logger.info(@line_text(context, nil, "passed! :)"))
            else
                logger.warn(@line_text(context, nil, "returned neither true nor false, but instead #{result}? :S"))
            result
        return output


export class TestBundle extends TestBase
    new: (name, tests) =>
        @name = name
        @tests = tests
    
    run: (config={}) =>
        _run_ordered_events(self\gather_events(config))

    gather_events: (config={}, _context={}) =>
        config = @.gather_events_config_with_defaults(config)
        context = @gather_events_context_with_defaults(_context)
        context = @extrapolate_subcontext(context)

        output = {}
        tally = {passed: 0, failed: 0, skipped: 0}
        output[] = ->
            logger.info(_n_tabs(context.indentation) .. "Running test bundle \"#{@.path_string(context.path)}\" (contains #{#@tests} subtest(s))...")

        context.test_count = #@tests
        for test_index, test in ipairs(@tests)
            context.test_index = test_index
            subcontext = test::extrapolate_subcontext(context)

            events = {}
            skippy = test::should_skip(config, subcontext)
            if skippy
                output[] = (result) -> 
                    tally.skipped += 1
                    logger.warn(_n_tabs(subcontext.indentation) .. "Skipped \"#{@.path_string(subcontext.path)}\"! Reason: #{skippy}")
            else
                events = test\gather_events(config, context)
                output[] = -> G.E_MANAGER\clear_queue()
                for _, event in ipairs(events)
                    output[] = event
                output[] = (result) -> 
                    tally[result and "passed" or "failed"] += 1
                    context.previous_results[@.path_string(subcontext.path)] = result

        output[] = ->
            all_passed = tally.failed == 0
            via = all_passed and logger.info or logger.error
            if tally.skipped > 0
                via(_n_tabs(context.indentation) .. "...done with \"#{@.path_string(context.path)}\". Ran #{#@tests - tally.skipped}/#{#@tests} test(s). #{tally.passed} passed, #{tally.failed} failed, #{tally.skipped} skipped.")
            else
                via(_n_tabs(context.indentation) .. "...done with \"#{@.path_string(context.path)}\". Ran #{#@tests} test(s). #{tally.passed} passed, #{tally.failed} failed.")

            if true or context.indentation == 0 -- This means it's over
                love.filesystem.write(PREVIOUS_RESULTS_PATH, json.encode(context.previous_results))

            return all_passed
        
        output


export run_all_tests = (config={}) ->
    G.E_MANAGER::clear_queue()

    print("Running only tests that didn't succeed on their last run...") if config.failed_only

    G.steamodded_tests::run(config)
        
_init = () ->
    G.steamodded_tests = TestBundle("All tests", {}) if G.steamodded_tests == nil
_init()

-- Assertions
_prepend_space_if_populated = (label) ->
    if label != ""
        label = " " .. label
    label

_abstract_comparison_assertion = (actual, comparison, expectation, explanation="", label="") ->
    explanation = _prepend_space_if_populated(explanation)
    label       = _prepend_space_if_populated(label)
    error_message = "Got #{actual}#{label}, but expected#{explanation} #{expectation}#{label}."
    assert(comparison(actual, expectation), error_message)

export assert_eq     = (actual, expectation, label="") -> _abstract_comparison_assertion(actual, ((a, b) -> a == b), expectation, "",                                 label)
export assert_ne     = (actual, expectation, label="") -> _abstract_comparison_assertion(actual, ((a, b) -> a != b), expectation, "anything but",                     label)
export assert_lt     = (actual, expectation, label="") -> _abstract_comparison_assertion(actual, ((a, b) -> a <  b), expectation, "a value less than",                label)
export assert_gt     = (actual, expectation, label="") -> _abstract_comparison_assertion(actual, ((a, b) -> a >  b), expectation, "a value greater than",             label)
export assert_le     = (actual, expectation, label="") -> _abstract_comparison_assertion(actual, ((a, b) -> a <= b), expectation, "a value less than or equal to",    label)
export assert_ge     = (actual, expectation, label="") -> _abstract_comparison_assertion(actual, ((a, b) -> a >= b), expectation, "a value greater than or equal to", label)



--- Helpful lil guys :)

export playing_card_from_string = (input) ->
    -- SMODS.create_card seems to be for everyihing but playing cards? Standard and Playing are both not the right set
    suit = "S"
    rank = "T"
    input = string.lower(input)

    if_contains_then = (searching_for, func) ->
        input, count = string.gsub(input, searching_for, "")
        if count > 0
            func()

    -- Suits

    if_contains_then("spades",      -> suit="S")
    if_contains_then("s",           -> suit="S")
    if_contains_then("♠",           -> suit="S")
    if_contains_then("♤",           -> suit="S")

    if_contains_then("hearts",       -> suit="H")
    if_contains_then("h",            -> suit="H")
    if_contains_then("♥",            -> suit="H")
    if_contains_then("♡",            -> suit="H")

    if_contains_then("clubs",       -> suit="C")
    if_contains_then("c",           -> suit="C")
    if_contains_then("♣",           -> suit="C")
    if_contains_then("♧",           -> suit="C")

    if_contains_then("diamonds",    -> suit="D")
    if_contains_then("d",           -> suit="D")
    if_contains_then("♦",           -> suit="D")
    if_contains_then("♢",           -> suit="D")

    -- Ranks

    if_contains_then("ace",         -> rank="A")
    if_contains_then("a",           -> rank="A")

    if_contains_then("king",        -> rank="K")
    if_contains_then("k",           -> rank="K")

    if_contains_then("queen",       -> rank="Q")
    if_contains_then("q",           -> rank="Q")

    if_contains_then("jack",        -> rank="J")
    if_contains_then("j",           -> rank="J")

    if_contains_then("ten",         -> rank="T")
    if_contains_then("10",          -> rank="T")
    if_contains_then("t",           -> rank="T")

    -- eval input="6";string.sub(input, string.find(input, "%d"))
    -- eval string.find("6", "6")
    -- eval string.sub(input, string.find("6", "6")

    a, b = string.find(input, "%d")
    if a != nil
        rank = string.sub(input, a, b)

    card = Card(G.play.T.x + G.play.T.w/2, G.play.T.y, G.CARD_W, G.CARD_H, front, G.P_CENTERS.c_base, {playing_card: G.playing_card})
    card\set_base(G.P_CARDS["#{suit}_#{rank}"])
    card

    -- Card(G.play.T.x + G.play.T.w/2, G.play.T.y, G.CARD_W, G.CARD_H, front, G.P_CENTERS.m_stone, {playing_card = G.playing_card})
    -- SMODS.create_card({
    --     set: "Standard",
    --     no_edition: true,
    --     soulable: false
    -- })


-- For actually making useful tests

export waiting_steps = (how_many=1) ->
    output = []
    for _ = 1, how_many
        output[] = -> nil
    output


export create_state_steps = (kwargs={}) ->
    kwargs.stake = kwargs.stake or 1
    kwargs.seed  = kwargs.seed  or "TUTORIAL"

    {
        -> G.FUNCS.start_run(nil, {
            stake: kwargs.stake,
            seed:  kwargs.seed,
        }),
        -- -> G.hand.config.card_limit = 1,
        -> new_round(),
        -- ->
            -- G.deck.config.card_limit = 0
            -- G.hand.cards = {}
    }

export empty_hand = ->
    G.hand.cards = {}

export empty_centers = ->
    G.jokers.cards = {}
    G.consumeables.cards = {}

export add_cards_to_hand = (playing_cards, select_them=false) ->
    for _, card in ipairs(playing_cards)
        if type(card) == "string"
            card = playing_card_from_string(card)
        card\add_to_deck()
        G.deck.config.card_limit += 1
        table.insert(G.playing_cards, card)
        G.hand\emplace(card)
        if select_them
            card\click!

export add_centers = (center_keys) ->
    center_keys = _put_in_array_if_alone(center_keys)
    for _, center_key in ipairs(center_keys)
        SMODS.add_card({key: center_key, soulable: false, no_edition: true})

export play_hand = (playing_cards, kwargs={})->
    kwargs.hold =    kwargs.hold or {}
    kwargs.centers = kwargs.centers or {}

    empty_hand()
    empty_centers()
    add_cards_to_hand(playing_cards, true)
    add_cards_to_hand(kwargs.hold)
    add_centers(kwargs.centers)
    
    G.FUNCS.play_cards_from_highlighted()

-- So this seems stupid, but...
-- It results in many functions. At time of writing, it's these, but this is open to change:
-- assert_hand_scored = (compare_chips_to) -> ...
-- assert_hand_scored_ne = (compare_chips_to) -> ...
-- assert_hand_scored_lt = (compare_chips_to) -> ...
-- assert_hand_scored_gt = (compare_chips_to) -> ...
-- assert_hand_scored_le = (compare_chips_to) -> ...
-- assert_hand_scored_ge = (compare_chips_to) -> ...
-- assert_dollars = (compare_dollars_to) -> ...
-- assert_dollars_ne = (compare_dollars_to) -> ...
-- assert_dollars_lt = (compare_dollars_to) -> ...
-- assert_dollars_gt = (compare_dollars_to) -> ...
-- assert_dollars_le = (compare_dollars_to) -> ...
-- assert_dollars_ge = (compare_dollars_to) -> ...
macro define_many_assertion_functions =  -> 
    output = ""

    for _, assertion_group in ipairs({
        {function_append: "hand_scored", value_label: "chips",   value_source: "G.GAME.chips"  },
        {function_append: "dollars",     value_label: "dollars", value_source: "G.GAME.dollars"},
    })
        for _, assertion_operation in ipairs({
            {internal_function_name: "assert_eq", external_function_append: ""   },
            {internal_function_name: "assert_ne", external_function_append: "_ne"},
            {internal_function_name: "assert_lt", external_function_append: "_lt"},
            {internal_function_name: "assert_gt", external_function_append: "_gt"},
            {internal_function_name: "assert_le", external_function_append: "_le"},
            {internal_function_name: "assert_ge", external_function_append: "_ge"},
        })
            -- You can't export like this, but you *can* assign to _module_0, which seemingly does the same thing
            output ..= "\n_module_0[\"assert_#{assertion_group.function_append}#{assertion_operation.external_function_append}\"] = (compare_#{assertion_group.value_label}_to) -> #{assertion_operation.internal_function_name}(#{assertion_group.value_source}, compare_#{assertion_group.value_label}_to, '#{assertion_group.value_label}')"
            --ex:       \n_module_0[\"assert_#{hand_scored                    }#{_lt                                         }\"] = (compare_#{chips                      }_to) -> #{assert_lt                                 }(#{G.GAME.chips                }, compare_#{chips                      }_to, '#{chips                      }')"
            --          export assert_hand_scored_lt = (compare_chips_to) -> assert_lt(G.GAME.chips, compare_chips_to, 'chips')
    output

$define_many_assertion_functions

-- DebugPlus stuff

subcommands = {
    failed: {
        function: (context) -> context.config.failed_only = true,
        description: "Runs only tests that didn't succeed the last time they were ran (this includes new tests that didn't succeed last time because there wasn't a last time)"
    }
}
for subcommand_name, subcommand in pairs(subcommands)
    subcommand.aliases = {
        "-"..string.sub(subcommand_name,1,1)
        "--"..subcommand_name
    }

config_from_string = (input_string) ->
    context = {
        tokens: [x for x in string.gmatch(input_string, "[^%s]+")]
        token_index: 1
        config: {}
    }

    while context.token_index <= #context.tokens
        token = context.tokens[context.token_index]
        found = false
        for subcommand_name, subcommand in pairs(subcommands)
            for alias in *subcommand.aliases
                if token != alias then continue
                print(context)
                subcommand.function(context)
                found = true
        if not found
            error("Unknown token: #{token}")
        context.token_index += 1
    return context.config

success, dpAPI = pcall(require, "debugplus-api")
if success and dpAPI.isVersionCompatible(1)
    local debugplus = dpAPI.registerID("steamodded_test")
    logger = debugplus.logger

    desc_lines = {}
    for subcommand_name, subcommand in pairs(subcommands)
        desc_lines[] = {
            table.concat(subcommand.aliases, ', ')
            subcommand.description
        }
    aliases_max_width = math.max(unpack [#desc_line[1] for desc_line in *desc_lines])

    desc = "IDK man!!! It runs your tests and tells you the results!! has subcommand(s) tho :)\n"
    desc ..= table.concat(
        ["\t" .. desc_line[1] .. string.rep(" ", aliases_max_width + 3 - #desc_line[1]) .. desc_line[2] for desc_line in *desc_lines],  -- This has to be on one line it seems which is kinda annoying
        "\n"
    )

    success, result = pcall(debugplus.addCommand, {
        name: "test",
        shortDesc: "Runs all tests.",
        desc: desc,
        exec: (args, raw_args, dp) ->
            config = config_from_string(raw_args)  -- Uses raw args because I want to eventually decouple this from dbp
            run_all_tests(config)
            "here we go :)"
    })
    if (not success) and (not string.match(result, "This command already exists$"))
        error(result)